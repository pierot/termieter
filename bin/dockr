#!/bin/bash -e
#
# Dockr
#
# Utility wrapper around our Docker/Traefik/Elixir/PHX stack
# Makes 'dropping in' running Elixir apps easier.
#
# version:      0.4
# created:      01/04/2020
# last update:  30/08/2024
# author:       Jack + Joe
#
# CHANGELOG
#
# 0.1 (01/04/2020)
# Initial version
#
# 0.2 (14/05/2020)
# - added version command
# - added help command
# - expanded status command to work without app name
#
# 0.3 (14/10/2020)
# - fixed variable interpolation in ssh command (https://github.com/pierot/termieter/issues/5)
#
# 0.4 (30/08/2024)
# - added 'shell' command to access the docker container instead of the Elixir release 

APP_NAME=""
IP="LOCAL"
USER="jackjoe"
APP_DIR=""
TRAEFIK_DIR="/app/traefik"

RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

usage() {
  cat <<-EOF
Usage: dockr [OPTIONS] COMMAND

Options:
  -a, --app  string       Name of the app
  -d, --appdir string     Location of the app on the remote machine - only needed
                          for [start], [restart] and [nuke] commands
  -i, --ip string         IP of remote machine. Defaults to 'LOCAL', which
                          should be used when running on the target machine
  -u, --user string       User connecting (default "jackjoe")
  -h, --help              This screen

Commands:
  status            Return the status of the active container for the app
                    If no app options is passed, the status of all running
                    containers is shown
  connect           Connect to the remote Elixir app
  shell             Shell into the docker container
  restart           Restart the app container
  stop              Stop the app
  start             Start the app
  nuke              Complete start/stop cycle for the traefik stack
  version           Show the version
  help              This screen

EOF
return;
}

while [[ $# -gt 0 ]]
do
  key="$1"

  case $key in
    -h|--help)
      usage
      exit
      shift # past argument
      ;;
    -v|--version)
      COMMAND+=("version")
      shift # past argument
      ;;
    -i|--ip)
      IP="$2"
      shift # past argument
      shift # past value
      ;;
    -u|--user)
      USER="$2"
      shift # past argument
      shift # past value
      ;;
    -a|--app)
      APP_NAME="$2"
      shift # past argument
      shift # past value
      ;;
    -d|--appdir)
      APP_DIR="$2"
      shift # past argument
      shift # past value
      ;;
    *)
      COMMAND+=("$1")
      shift # Remove generic argument from processing
      ;;
  esac
done

# check required variables
if [ -z "$APP_NAME" ] && [[ "$COMMAND" =~ ^(restart|stop|start|nuke)$ ]]; then
  usage
  exit
fi

# do commands
case $COMMAND in
  help)
    usage
    ;;
  version)
    echo "Dockr version 0.3, build October 14 2020"
    ;;
  status)
    if [ "$IP" == "LOCAL" ]; then
    sudo docker ps --filter name=$APP_NAME --format "table {{.Names}}\t{{.Status}}\t{{.CreatedAt}}\t{{.Ports}}"
    else
    ssh -q $USER@$IP "sudo docker ps --filter name=$APP_NAME --format \"table {{.Names}}\t{{.Status}}\t{{.CreatedAt}}\t{{.Ports}}\""
    fi
    ;;
  connect)
    if [ "$IP" == "LOCAL" ]; then
      echo "Searching for $APP_NAME..."
      CONTAINER=$(sudo docker ps --format "{{.Names}}" | grep ""$APP_NAME"" | head -n 1)
      echo "Connecting to container $CONTAINER"
      sudo docker exec -i -t $CONTAINER /bin/bash -c './bin/production remote'
    else
      echo "Connecting to IP $IP as $USER..."
      echo "Searching for $APP_NAME..."
      CONTAINER=$(ssh -q $USER@$IP 'f() { sudo docker ps --format "{{.Names}}" | grep "$1" | head -n 1 }; f "'"$APP_NAME"'"')
      echo -e "${GREEN}Found app container: ${NC} $CONTAINER"
      echo "Connecting to container $CONTAINER"
      ssh -o 'RequestTTY force'  $USER@$IP "sudo docker exec -i -t $CONTAINER /bin/bash -c './bin/production remote'"
    fi
    ;;
  shell)
    if [ "$IP" == "LOCAL" ]; then
      echo "Searching for $APP_NAME..."
      CONTAINER=$(sudo docker ps --format "{{.Names}}" | grep ""$APP_NAME"" | head -n 1)
      echo "Connecting to container $CONTAINER"
      sudo docker exec -i -t $CONTAINER /bin/bash 
    else
      echo "Connecting to IP $IP as $USER..."
      echo "Searching for $APP_NAME..."
      CONTAINER=$(ssh -q $USER@$IP 'f() { sudo docker ps --format "{{.Names}}" | grep "$1" | head -n 1 }; f "'"$APP_NAME"'"')
      echo -e "${GREEN}Found app container: ${NC} $CONTAINER"
      echo "Connecting to container $CONTAINER"
      ssh -o 'RequestTTY force'  $USER@$IP "sudo docker exec -i -t $CONTAINER /bin/bash"
    fi
    ;;
  stop)
    if [ "$IP" == "LOCAL" ]; then
      echo "Searching for $APP_NAME..."
      sudo docker ps --format "{{.Names}}" | grep ""$APP_NAME"" | head -n 1 | xargs -I{} sudo docker stop {}
    else
      echo "Connecting to IP $IP as $USER..."
      echo "Searching for $APP_NAME..."
      CONTAINER=$(ssh -q $USER@$IP 'f() { sudo docker ps --format "{{.Names}}" | grep "$1" | head -n 1 | xargs -I{} sudo docker stop }; f "'"$APP_NAME"'"')
    fi
    echo -e "${GREEN}Stopped app container: ${NC} $CONTAINER"
    ;;
  start)
    if [ "$IP" == "LOCAL" ]; then
      echo "Searching for $APP_NAME..."
      cd $APP_DIR && sudo ./script/deploy.sh
    else
      echo "Connecting to IP $IP as $USER..."
      echo "Searching for $APP_NAME..."
      ssh $USER@$IP "cd $APP_DIR && sudo ./script/deploy.sh"
    fi
    echo -e "${GREEN}Started app container: ${NC} $CONTAINER"
    ;;
  restart)
    if [ "$IP" == "LOCAL" ]; then
      echo "Finding app directory for $APP_NAME ($APP_DIR)..."
      if [ ! -e $APP_DIR ]; then
        echo "Restarting docker container..."
        cd $APP_DIR && sudo ./script/deploy.sh
        echo -e "${GREEN}Docker container restarted${NC}"
      else
        echo -e "${RED}Error:${NC} app dir not found."
        exit
      fi
    else
      echo "Connecting to IP $IP as $USER..."
      echo "Finding app directory for $APP_NAME ($APP_DIR)..."
      if [ ! -e $APP_DIR ]; then
        echo "Restarting docker container..."
        ssh $USER@$IP "cd $APP_DIR && sudo ./script/deploy.sh"
        echo -e "${GREEN}Docker container restarted${NC}"
      else
        echo -e "${RED}Error:${NC} app dir not found."
        exit
      fi
    fi
    ;;
  nuke)
    if [ "$IP" == "LOCAL" ]; then
      echo "Finding traefik directory for $APP_NAME..."
      if [ ! -e $TRAEFIK_DIR ]; then
        echo "Restarting traefik..."
        cd $TRAEFIK_DIR && sudo docker-compose restart
        echo -e "${GREEN}Docker container restarted${NC}"
      else
        echo -e "${RED}Error:${NC} app dir not found."
        exit
      fi
    else
      echo "Connecting to IP $IP as $USER..."
      echo "Finding traefik directory for $APP_NAME..."
      if [ ! -e $TRAEFIK_DIR ]; then
        echo "Restarting traefik..."
        ssh $USER@$IP "cd $TRAEFIK_DIR && sudo docker-compose restart"
        echo -e "${GREEN}Docker container restarted${NC}"
      else
        echo -e "${RED}Error:${NC} app dir not found."
        exit
      fi
    fi
    ;;
  *)
    echo "Invalid command '$COMMAND'"
    echo ""
    usage
    exit
esac
