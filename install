#!/bin/bash

# Interactive and non-interactive installation
# Can be run with flags for automation or without for interactive prompts

# SCRIPT=`basename ${BASH_SOURCE[0]}`

# Colors
COL_GREEN="\x1b[32;01m"
COL_BLUE="\x1b[34;01m"
COL_RESET="\x1b[39;49;00m"
COL_RED="\x1b[31;01m"
COL_YELLOW="\x1b[33;01m"

# Temp dir for installs
temp_dir='/tmp/termieter/src'
mkdir -p $temp_dir

usage() {
cat <<EOF
  $*
  Usage:          ./install [options]

  Options:

    -h  --help           Show this message
    -u, --update         Update local setup (no cloning, no removing)
    -d, --directory      Install directory [~/.termieter]
    -s, --starship       Install starship prompt (optional, recommended for performance)

  Remote usage:

  bash <( curl -s https://raw.github.com/pierot/termieter/master/install.sh ) [-d '.termieter'] [-s]

EOF
exit 0
}

# Print helpers
_print_h1() {
  printf $COL_GREEN"\nðŸ¤´  $1\n"$COL_RESET
}

_print_info() {
  printf $COL_YELLOW"Ã— $1\n"$COL_RESET
}

_print() {
  printf $COL_BLUE"$1\n"$COL_RESET
}

_error() {
  _print $COL_RED"Error:\n\t$1\n"
}

_contains_element() {
  local e match="$1"
  shift
  for e; do [[ "$e" == "$match" ]] && return 0; done
  return 1
}

# variables
install_dir="$HOME/.termieter"
update=0
install_starship=0

# parse opts
OPTSPEC="d:h-:us"
while getopts "$OPTSPEC" FLAG; do
  case $FLAG in
    -)
      case "$OPTARG" in
        directory) install_dir=$OPTARG;;
        starship) install_starship=1;;
      esac;;
    d)
      install_dir=$OPTARG
      ;;
    h)
      usage
      ;;
    u)
      update=1
      ;;
    s)
      install_starship=1
      ;;
    \?) #unrecognized option - show help
      printf \\n"Option -${BOLD}$OPTARG${OFF} not allowed."
      usage
      ;;
  esac
done

##################################################

# Check for git
hash git 2>&- || { _error "I require git but it's not installed!"; exit 1; }

##################################################

git config --global url."https://".insteadOf git://

# Remove previous termieter installation if present at the same location as $install_dir
cd ~ || return

_print_h1 "Install termieter"

if [ "$update" -eq 0  ]; then
  _print "Checking for existing termieter installation.."
  if [ -d "$install_dir" ]; then
    _print_info "Existing installation found, removing..."
    rm -rf "$install_dir"
    _print_info "Previous version removed"
  fi

  _print "Cloning termieter.."

  if [ ! -d "$install_dir" ]; then
    if ! (git clone -q git@github.com:pierot/termieter.git "$install_dir") then
      _print_info "Cloning termieter from https.."
      git clone -q https://github.com/pierot/termieter.git "$install_dir"
    fi
  fi
fi

##################################################

_print_h1 "Install user files"

mkdir -p ~/.bash_backup

_back_install() {
  _print "Installing $1"

  if [ ! -n "$1" ]; then
    _error "Error in install script. Aborting"
    exit 1
  fi

  if [ -f "$HOME/.$1" ]; then
    mv "$HOME/.$1" "$HOME/.bash_backup/.$1"
  fi

  if [ -f "$install_dir/symlinks/$1" ]; then
    if [ -n "$2" ]; then
      ln -sf "$install_dir/symlinks/$1" "$HOME/.$2"
    else
      ln -sf "$install_dir/symlinks/$1" "$HOME/.$1"
    fi
  fi
}

for sym_file in $install_dir/symlinks/*; do
  _back_install $(basename $sym_file)
done

##################################################

_back_install_user() {
  _print "Installing $USER $1"

  if [ ! -n "$1" ]; then
    _error "Error in install script. Aborting"
    exit 1
  fi

  if [ -f "$HOME/.$1.local" ]; then
    mv "$HOME/.$1.local" "$HOME/.bash_backup/.$1.local"
  fi

  if [ -d "$install_dir/users/$USER/$1" ]; then
    if [[ "$1" == "bin" && ! -L "$HOME/$1" ]]; then
      echo ""
      printf "link $install_dir/users/$USER/$1 -> $HOME/$1"
      ln -sf "$install_dir/users/$USER/$1" "$HOME/$1"
    fi
  fi

  if [ -f "$install_dir/users/$USER/$1" ]; then
    locals=("base.sh" "vimrc.plugs" "vimrc" "gvimrc" "gitconfig" "zshrc" "tmux.conf")

    if _contains_element "$1" "${locals[@]}"; then
      echo "local file $1"
      ln -sf "$install_dir/users/$USER/$1" "$HOME/.$1.local"
    elif [ -n "$2" ]; then
      ln -sf "$install_dir/users/$USER/$1" "$HOME/.$2"
    else
      ln -sf "$install_dir/users/$USER/$1" "$HOME/.$1"
    fi
  fi
}

for sym_file in $install_dir/users/$USER/*; do
  _back_install_user $(basename $sym_file)
done

##################################################

# ~/.config install
if [ -d "$HOME/.config" ]; then
  mv "$HOME/.config" "$HOME/.config.backup"
  rm -rf "$HOME/.config"
fi

ln -sf "$install_dir/users/$USER/config" "$HOME/.config"

##################################################

# _print_h1 "Init paq-nvim (https://github.com/savq/paq-nvim)"

# paq_dir="${XDG_DATA_HOME:-$HOME/.local/share}"/nvim/site/pack/paqs/opt/paq-nvim

# if [ -d "$paq_dir" ]; then
#   rm -rf "$paq_dir"
# fi

# git clone -q https://github.com/savq/paq-nvim.git $paq_dir

##################################################

if [ -d "$install_dir" ]; then
  cd "$install_dir" || return

  _print_h1 "Init tmux-resurrect"

  if [ -d "$install_dir/tmux/tmux-resurrect" ] ; then
    _print "tmux-resurrect is already installed"
  else
    git clone -q https://github.com/tmux-plugins/tmux-resurrect "$install_dir/tmux/tmux-resurrect"
  fi
fi

##################################################

# Optional: Install starship prompt
_print_h1 "Starship prompt (optional)"

# Check if starship is already installed
if hash starship 2>/dev/null; then
  _print "Starship is already installed âœ“"
  install_starship=1  # Mark as installed for the final message
else
  # If -s flag not provided, ask the user
  if [ "$install_starship" -eq 0 ]; then
    _print "Starship is a fast, cross-shell prompt (recommended for best performance)"
    _print_info "Would you like to install starship? (40% faster startup)"
    printf "${COL_YELLOW}Install starship? [Y/n]: ${COL_RESET}"
    read -r response

    # Default to yes if just Enter is pressed
    if [[ -z "$response" ]] || [[ "$response" =~ ^[Yy]$ ]]; then
      install_starship=1
    fi
  fi

  # Install if requested
  if [ "$install_starship" -eq 1 ]; then
    _print "Installing starship..."

    # Detect OS and install accordingly
    if [[ "$(uname)" == "Darwin" ]]; then
      if hash brew 2>/dev/null; then
        brew install starship
      else
        curl -sS https://starship.rs/install.sh | sh -s -- -y
      fi
    else
      curl -sS https://starship.rs/install.sh | sh -s -- -y
    fi

    _print "Starship installed successfully âœ“"
  else
    _print "Skipping starship installation (you can install it later with: brew install starship)"
  fi
fi

##################################################

_print_h1 "Installation finished"
_print " Do not forget to switch to zsh as the default shell"
_print_info " \$ sudo chsh -s /bin/zsh $USER"

if [ "$install_starship" -eq 1 ]; then
  _print ""
  _print_info " Starship prompt installed and will be used automatically"
  _print_info " To customize: starship config"
fi

_print ""
