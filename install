#!/bin/bash

# Major changes:

# Git
# The script does no longer help with installing git, since this might be different accross systems. Moreover, most of our (Jack + Joe) base systems all have git installed, so this is no longer an option. If you do not have git installed, the script will abort with exit status 1
#
# Not interactive
# All interactive commands have been replaced with arguments, making it easier to integrate with automation. Also the script does not provide the change to zsh anymore.

SCRIPT=`basename ${BASH_SOURCE[0]}`

# Colors
COL_GREEN="\x1b[32;01m"
COL_BLUE="\x1b[34;01m"
COL_RESET="\x1b[39;49;00m"
COL_RED="\x1b[31;01m"
COL_YELLOW="\x1b[33;01m"
COL_GRAY="\x1b[0;37m"

# Temp dir for installs
temp_dir='/tmp/termieter/src'
mkdir -p $temp_dir

function _usage {
cat <<EOF
  $*
  Usage:          ./install [options]

  Options:

    -h  --help           Show this message
    -d, --directory      Install directory (always in $HOME folder) [.termieter]

  Remote usage:

    bash <( curl -s https://raw.github.com/pierot/termieter/master/install.sh  ) [-d '.termieter']

EOF
exit 0
}

# Print helpers
_print_h1() {
  printf $COL_GREEN"\nðŸ¤´  $1"$COL_RESET
}

_print_h2() {
  printf $COL_YELLOW"\nÃ— $1"$COL_RESET
}

_print() {
  printf "\n$1"
}

_error() {
  _print $COL_RED"Error:\n$1\n"
}

# variables
install_dir=".termieter"
with_git=false

# parse opts
OPTSPEC="p:d:v:h-:"
while getopts "$OPTSPEC" FLAG; do
  case $FLAG in
    -)
      case "$OPTARG" in
        directory) install_dir=$OPTARG;;
      esac;;
    d)
      install_dir=$OPTARG
      ;;
    h)
      _usage
      ;;
    \?) #unrecognized option - show help
      printf \\n"Option -${BOLD}$OPTARG${OFF} not allowed."
      _usage
      ;;
  esac
done

###############################################################################

# Check for git
hash git 2>&- || { _error "I require git but it's not installed!"; exit 1; }

###############################################################################

# Remove previous termieter installation if present at the same location as $install_dir
cd ~

_print "Checking for existing termieter installation.."
if [ -d "$install_dir" ]; then
  _print_h2 "Existing installation found, removing..."
  rm -rf "$install_dir"
  _print_h2 "Previous version removed"
fi

_print "Cloning termieter.."
if [ ! -d "$install_dir" ]; then
  git clone git://github.com/pierot/termieter.git "$install_dir"
fi

###############################################################################

mkdir -p ~/.bash_backup

_back_install() {
  _print "Installing $1"

  if [ ! -n "$1" ]; then
    _error "Error in install script. Aborting"

    exit 1
  fi

  if [ -f "$HOME/.$1" ]; then
    mv "$HOME/.$1" "$HOME/.bash_backup/.$1"
  fi

  if [ -f "$install_dir/symlinks/$1" ]; then
    if [ -n "$2" ]; then
      ln -sf "$install_dir/symlinks/$1" "$HOME/.$2"
    else
      ln -sf "$install_dir/symlinks/$1" "$HOME/.$1"
    fi
  fi
}

for sym_file in $install_dir/symlinks/*
do
  _back_install $(basename $sym_file)
done

###############################################################################

cd $install_dir

_print "Init submodules"

git submodule update --init -q

_print "Init custom plugins"

if [ ! -d "zsh/oh-my-zsh/custom/plugins" ]; then
  mkdir "zsh/oh-my-zsh/custom/plugins"
fi

if [ ! -d "zsh/oh-my-zsh/functions" ]; then
  mkdir "zsh/oh-my-zsh/functions"
fi

if [ -d "$HOME/$install_dir/tmux/tmux-resurrect" ] ; then
  _success "tmux-resurrect is already installed"
else
  git clone https://github.com/tmux-plugins/tmux-resurrect $HOME/$install_dir/tmux/tmux-resurrect -q
fi

###############################################################################

_print_h1 "Installation finished"
_print " Do not forget to switch to zsh as the default shell"
_print_h2 " \$ sudo chsh -s /bin/zsh $USER"
_print ""
